networks:
  backend:
    driver: bridge
  dokploy-network:
    # Jaringan ini harus ada dan Dokploy akan mengelolanya
    external: true


volumes:
  pg_app_data: {}
  redis_app_data: {}
  minio_app_data: {}
  nginx_logs: {}


services:
  postgres:
    # ... (Konfigurasi postgres tetap sama dari jawaban sebelumnya) ...
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    networks: [ backend, dokploy-network ]
    volumes:
      - pg_app_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  redis:
    # ... (Konfigurasi redis tetap sama dari jawaban sebelumnya) ...
    image: redis:7-alpine
    restart: unless-stopped
    command: [ "redis-server", "--save", "60", "1", "--loglevel", "warning", "--requirepass", "${REDIS_PASSWORD}" ]
    networks: [ backend, dokploy-network ]
    volumes:
      - redis_app_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  minio:
    # ... (Konfigurasi minio tetap sama dari jawaban sebelumnya) ...
    image: quay.io/minio/minio:latest
    restart: unless-stopped
    networks: [ backend, dokploy-network ]
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_app_data:/data
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    security_opt:
      - no-new-privileges:true

  app:
    # ... (Konfigurasi app tetap sama dari jawaban sebelumnya) ...
    build: .
    restart: unless-stopped
    networks: [ backend, dokploy-network ]
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      minio: { condition: service_healthy }
    env_file: .env
    # ... (Environment variables di sini) ...
    environment:
      APP_ENV: ${APP_ENV}
      APP_PORT: ${APP_PORT}
      APP_ALLOWED_ORIGINS: ${APP_ALLOWED_ORIGINS}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSL_MODE: ${DB_SSL_MODE}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
      MINIO_ENDPOINT: "minio:9000"
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      MINIO_PUBLIC_URL: ${MINIO_PUBLIC_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY_HOURS: ${JWT_EXPIRY_HOURS}
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    # Hapus 'ports' eksternal (80:80, 443:443)
    # Gunakan 'expose' untuk menunjukkan port internal yang akan di-route oleh Traefik
    expose:
      - "80"
    volumes:
      - ./nginx-prod/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-prod/sites-available:/etc/nginx/sites-available:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      app: { condition: service_healthy }
      minio: { condition: service_healthy }
    networks: [ backend, dokploy-network ] # WAJIB terhubung ke dokploy-network

    # === START KONFIGURASI DOMAIN DOKPLOY (TRAEFIK LABELS) ===
    labels:
      # Aktifkan Traefik untuk service ini
      - "traefik.enable=true"

      # Tentukan router utama (Web)
      - "traefik.http.routers.building-report-web.rule=Host(`backend-dashboard.jagoansatudata.com`)"
      - "traefik.http.routers.building-report-web.entrypoints=websecure" # Menggunakan HTTPS
      - "traefik.http.routers.building-report-web.tls.certresolver=letsencrypt" # Menggunakan Let's Encrypt Dokploy

      # Tentukan service dan port internal Nginx (80)
      - "traefik.http.services.building-report-web.loadbalancer.server.port=80"

      # Opsional: Redirect HTTP ke HTTPS
      - "traefik.http.routers.http-catchall.rule=Host(`backend-dashboard.jagoansatudata.com`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # MinIO S3 Router
      - "traefik.http.routers.minio-s3-web.rule=Host(`s3-backend-dashboard.jagoansatudata.com`)"
      - "traefik.http.routers.minio-s3-web.entrypoints=websecure"
      - "traefik.http.routers.minio-s3-web.tls.certresolver=letsencrypt"
      - "traefik.http.routers.minio-s3-web.service=building-report-web"

      # MinIO S3 HTTP to HTTPS Redirect
      - "traefik.http.routers.minio-s3-http.rule=Host(`s3-backend-dashboard.jagoansatudata.com`)"
      - "traefik.http.routers.minio-s3-http.entrypoints=web"
      - "traefik.http.routers.minio-s3-http.middlewares=redirect-to-https"

      # === END KONFIGURASI DOMAIN DOKPLOY ===

    security_opt:
      - no-new-privileges:true
