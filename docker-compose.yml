version: '3.8'

networks:
  backend:
    driver: bridge

volumes:
  pg_app_data:
  redis_app_data:
  minio_app_data:
  nginx_logs:

services:
  postgres:
    image: postgres:15-alpine
    container_name: building-report-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    networks: [backend]
    volumes:
      - pg_app_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7-alpine
    container_name: building-report-redis
    restart: unless-stopped
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning", "--requirepass", "${REDIS_PASSWORD}"]
    networks: [backend]
    volumes:
      - redis_app_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    security_opt:
      - no-new-privileges:true

  minio:
    image: quay.io/minio/minio:latest
    container_name: building-report-minio
    restart: unless-stopped
    networks: [backend]
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_app_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
    security_opt:
      - no-new-privileges:true

  app:
    build: .
    container_name: building-report-app
    restart: unless-stopped
    networks: [backend]
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      minio: { condition: service_healthy }
    env_file: .env
    environment:
      APP_ENV: ${APP_ENV}
      APP_PORT: ${APP_PORT}
      APP_ALLOWED_ORIGINS: ${APP_ALLOWED_ORIGINS}

      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSL_MODE: ${DB_SSL_MODE}

      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}

      MINIO_ENDPOINT: "minio:9000"
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      MINIO_PUBLIC_URL: ${MINIO_PUBLIC_URL}

      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY_HOURS: ${JWT_EXPIRY_HOURS}
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
    security_opt:
      - no-new-privileges:true

  nginx:
    image: nginx:alpine
    container_name: building-report-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/lib/letsencrypt:/var/lib/letsencrypt:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
      - minio
    networks: [backend]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
    security_opt:
      - no-new-privileges:true